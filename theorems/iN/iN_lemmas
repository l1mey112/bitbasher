import theorems.iN.iN_def
import theorems.iN.iN_normal

theorem test_without {n} (x : iN n) : iN.shlNsw x 0 = x := by
  simp [iN_unwrap_poison]
  cases x with
  | poison => rfl
  | bitvec a => simp [iN_to_bitvec]

/- theorem com {n} (x y : iN n)
    : x + y = y + x := by

  cases x with
  | poison => rfl

  simp [iN_to_bitvec]
 -/

/- @[simp]
theorem com {n} (x : iN n) (val : Nat)
  : ((no_index OfNat.ofNat val) : iN n) + x
    = x + ((no_index OfNat.ofNat val) : iN n) := by
  cases x with
  | poison => rfl
  | bitvec a =>
    simp [iN_to_bitvec]
    apply BitVec.add_comm -/


@[simp]
theorem com0 {n} (x : iN n) (val : Nat)
  : lit(val) + x = x + lit(val) := by
  cases x with
  | poison => rfl
  | bitvec a =>
    simp [iN_to_bitvec]
    apply BitVec.add_comm

-- @bitvec n 23#â†‘n : iN n

theorem test {n} (x : iN n) : x + x = x + 23 := by

  simp
